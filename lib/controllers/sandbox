
/*
Future sendOTPRequest(String phoneNo) async {
  FirebaseAuth auth = FirebaseAuth.instance;
  print("abput to send");
  await auth.verifyPhoneNumber(
    phoneNumber: phoneNo,
    codeSent: (String verificationId, int? resendToken) async {
      // Update the UI - wait for the user to enter the SMS code
      String smsCode = 'xxxx';
      //Get.to(ConfirmOTPPage(phoneNo: phoneNo));
      // Create a PhoneAuthCredential with the code
      PhoneAuthCredential credential = PhoneAuthProvider.credential(
          verificationId: verificationId, smsCode: smsCode);

      // Sign the user in (or link) with the credential
      await auth.signInWithCredential(credential);
    },
    verificationCompleted: (phoneAuthCredential) async {
      print("abput to send");
      return;
    },
    verificationFailed: (error) async {
      print(error);
      return;
    },
    codeAutoRetrievalTimeout: (verificationId) async {
      return;
    },
  );
}
*/




//const kPrimaryColor = Colors.blue;
//const kPrimaryColor2 = Color(0xFFFFAA00);
//const kTextColor = Color(0xFF1C1C1C);
//const kLightTextColor = Color(0xFF363636);
//const kAltTextColor = Color(0xFFBBBBBB);
//const kAltDarkTextColor = Color(0xFF9D9D9D);
//const kInputColor = Color(0xFFF0F0F0);
//const kInputTextColor = Color(0xFF646464);
//const kINputLabelColor = Color(0xFF5E5E5E);
//const kFbColor = Color(0xFF1976D2);
//const kGoogleColor = Color(0xFFFF3D00);

//const kDefaultPadding = 28.0;


  /*  User user = userCredential.user!;
      print("user details are$user");
      print("user details are${user.email}");
      if (user.email == null) {
        // Create a document in the 'users' collection with the user's UID
        await firestore.collection('users').doc(user.uid).set({
          'phoneNumber': phone,
          // Add additional user data as needed
        });

        Get.offAll(() => CreateEmailPage());
      } else if (user.displayName == null) {
        print("user has no username");
        Get.offAll(() => ProvideAccountUsername());
      } else {
        print("user has email and username");
        //Get.to(HomePage());
      }*/


    /* if (user == null) {
      // if the user is not found then the user is navigated to the Register Screen

      Get.offAll(() => OnBoarding());
    } else if (user.email == null) {
      // Create a document in the 'users' collection with the user's UID
      print("account has no username");
      //authController.logout();
      Get.offAll(() => LoginScreen());
    } else if (user.displayName == null) {
      print("user has no username");
      Get.offAll(() => ProvideAccountUsername());
    } else {
      print("user has email and username");
      Get.offAll(() => const LocationPermissionRequestPage());
    }*/




  _setInitialScreen(User? user) async {
    print("on this set intial page  $user");
    if (user == null) {
      // Obtain shared preferences.
      final SharedPreferences prefs = await SharedPreferences.getInstance();
      final bool? first_time = prefs.getBool('first_time');
      // User is not signed in, redirect to login page
      if (first_time != null) {
        Get.offNamed('/login_options');
        return;
      } else {
        Get.offNamed('/onboarding');
        return;
      }
    } else {
      // User is signed in, check additional user information
      user = auth.currentUser;
      //print("user $user");
      print("auth user ${auth.currentUser}");
      if (user?.email == null) {
        print("hello");
        Get.offNamed('/home');
        return;
      } else if (user?.displayName == null) {
        // User has an email and display name, redirect to home page
        Get.offAll(() => ProvideAccountUsername());
        return;
      } else {
        // User is signed in but missing email or display name, redirect to profile setup page

        Get.offAll(() => CreateEmailPage());
        return;
      }
    }
  }

   if (!_isConfirmed.value)
              Container(
                color: Colors.black.withOpacity(0.5),
              ),


          


          /*Obx(
      () {
        return Stack(
          children: [
            // Main content
            Center(
              child: _isConfirmed.value
                  ? Text('Partner confirmed the add request.')
                  : SizedBox(
                      width: double.infinity,
                      height: 300,
                      child: Image.asset("assets/images/please_wait.gif"),
                    ),
            ),
            // Optionally, you can add a transparent overlay to prevent interaction
          ],
        );
      },
    );
  }*/





  Center(
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Container(
                    height: 50,
                    decoration: BoxDecoration(
                        border: Border.all(color: Colors.blueGrey),
                        // color: Colors.,
                        borderRadius: BorderRadius.circular(12.0)),
                    child: Row(
                      //  mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Opacity(
                          opacity: _animation.value,
                          child: RandomAvatar('saytoonz',
                              trBackground: true, height: 50, width: 50),
                        ),
                        Spacer(),
                        Text(
                          '${userData!['displayName']}',
                        ),

                        ElevatedButton(
                          onPressed: () {
                            // Add logic to handle partner confirmation
                          },
                          child: Text('Confirm'),
                        ),

                        // Add more details as needed
                      ],
                    ),
                  ),
                ),
              );